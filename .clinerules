# AI Coding with TypeScript: ベストプラクティス

これは TypeScript と AI を駆使してコードを書く際の使い方についてまとめた資料。人間が読む以外に、コーディングエージェントがプロンプトとして読むことを想定する。

## コーディングポリシー

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する
- パッケージ管理ツールはpnpmを使用する
- 余計なライブラリは依存関係が増えるため入れない
- ステップバイステップで実装を進めテストコードを都度追加する
- テストにはvitestを使用する
- linterはbiomeを使用する
- フォーマッターはbiomeを使用する
- 実装のステップごとにコミットを行う
- コミットする前にフォーマットをする

### 型定義の方針

- 可能な限り具体的な型を使用し、any の使用を避ける
- 共通の型パターンには Utility Types を活用する
- 型エイリアスは意味のある名前をつけ、型の意図を明確にする

```ts
// 良い例
type UserId = string;
type UserData = {
  id: UserId;
  createdAt: Date;
};

// 避けるべき例
type Data = any;
```